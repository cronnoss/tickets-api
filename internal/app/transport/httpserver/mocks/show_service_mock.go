// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/cronnoss/tickets-api/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// ShowService is an autogenerated mock type for the ShowService type
type ShowService struct {
	mock.Mock
}

type ShowService_Expecter struct {
	mock *mock.Mock
}

func (_m *ShowService) EXPECT() *ShowService_Expecter {
	return &ShowService_Expecter{mock: &_m.Mock}
}

// CreateShow provides a mock function with given fields: ctx, show
func (_m *ShowService) CreateShow(ctx context.Context, show domain.Show) (domain.Show, error) {
	ret := _m.Called(ctx, show)

	if len(ret) == 0 {
		panic("no return value specified for CreateShow")
	}

	var r0 domain.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Show) (domain.Show, error)); ok {
		return rf(ctx, show)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Show) domain.Show); ok {
		r0 = rf(ctx, show)
	} else {
		r0 = ret.Get(0).(domain.Show)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Show) error); ok {
		r1 = rf(ctx, show)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowService_CreateShow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShow'
type ShowService_CreateShow_Call struct {
	*mock.Call
}

// CreateShow is a helper method to define mock.On call
//   - ctx context.Context
//   - show domain.Show
func (_e *ShowService_Expecter) CreateShow(ctx interface{}, show interface{}) *ShowService_CreateShow_Call {
	return &ShowService_CreateShow_Call{Call: _e.mock.On("CreateShow", ctx, show)}
}

func (_c *ShowService_CreateShow_Call) Run(run func(ctx context.Context, show domain.Show)) *ShowService_CreateShow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Show))
	})
	return _c
}

func (_c *ShowService_CreateShow_Call) Return(_a0 domain.Show, _a1 error) *ShowService_CreateShow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShowService_CreateShow_Call) RunAndReturn(run func(context.Context, domain.Show) (domain.Show, error)) *ShowService_CreateShow_Call {
	_c.Call.Return(run)
	return _c
}

// GetShows provides a mock function with given fields: ctx
func (_m *ShowService) GetShows(ctx context.Context) ([]domain.Show, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetShows")
	}

	var r0 []domain.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Show, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Show); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowService_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type ShowService_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ShowService_Expecter) GetShows(ctx interface{}) *ShowService_GetShows_Call {
	return &ShowService_GetShows_Call{Call: _e.mock.On("GetShows", ctx)}
}

func (_c *ShowService_GetShows_Call) Run(run func(ctx context.Context)) *ShowService_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ShowService_GetShows_Call) Return(_a0 []domain.Show, _a1 error) *ShowService_GetShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShowService_GetShows_Call) RunAndReturn(run func(context.Context) ([]domain.Show, error)) *ShowService_GetShows_Call {
	_c.Call.Return(run)
	return _c
}

// NewShowService creates a new instance of ShowService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShowService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShowService {
	mock := &ShowService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
