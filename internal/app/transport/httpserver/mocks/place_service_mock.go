// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/cronnoss/tickets-api/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// PlaceService is an autogenerated mock type for the PlaceService type
type PlaceService struct {
	mock.Mock
}

type PlaceService_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaceService) EXPECT() *PlaceService_Expecter {
	return &PlaceService_Expecter{mock: &_m.Mock}
}

// CreatePlace provides a mock function with given fields: ctx, place
func (_m *PlaceService) CreatePlace(ctx context.Context, place domain.Place) (domain.Place, error) {
	ret := _m.Called(ctx, place)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlace")
	}

	var r0 domain.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Place) (domain.Place, error)); ok {
		return rf(ctx, place)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Place) domain.Place); ok {
		r0 = rf(ctx, place)
	} else {
		r0 = ret.Get(0).(domain.Place)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Place) error); ok {
		r1 = rf(ctx, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceService_CreatePlace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlace'
type PlaceService_CreatePlace_Call struct {
	*mock.Call
}

// CreatePlace is a helper method to define mock.On call
//   - ctx context.Context
//   - place domain.Place
func (_e *PlaceService_Expecter) CreatePlace(ctx interface{}, place interface{}) *PlaceService_CreatePlace_Call {
	return &PlaceService_CreatePlace_Call{Call: _e.mock.On("CreatePlace", ctx, place)}
}

func (_c *PlaceService_CreatePlace_Call) Run(run func(ctx context.Context, place domain.Place)) *PlaceService_CreatePlace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Place))
	})
	return _c
}

func (_c *PlaceService_CreatePlace_Call) Return(_a0 domain.Place, _a1 error) *PlaceService_CreatePlace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaceService_CreatePlace_Call) RunAndReturn(run func(context.Context, domain.Place) (domain.Place, error)) *PlaceService_CreatePlace_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaces provides a mock function with given fields: ctx
func (_m *PlaceService) GetPlaces(ctx context.Context) ([]domain.Place, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaces")
	}

	var r0 []domain.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Place, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Place); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Place)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceService_GetPlaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaces'
type PlaceService_GetPlaces_Call struct {
	*mock.Call
}

// GetPlaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PlaceService_Expecter) GetPlaces(ctx interface{}) *PlaceService_GetPlaces_Call {
	return &PlaceService_GetPlaces_Call{Call: _e.mock.On("GetPlaces", ctx)}
}

func (_c *PlaceService_GetPlaces_Call) Run(run func(ctx context.Context)) *PlaceService_GetPlaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PlaceService_GetPlaces_Call) Return(_a0 []domain.Place, _a1 error) *PlaceService_GetPlaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlaceService_GetPlaces_Call) RunAndReturn(run func(context.Context) ([]domain.Place, error)) *PlaceService_GetPlaces_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlaceService creates a new instance of PlaceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlaceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlaceService {
	mock := &PlaceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
